// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrackFlow.Infrastructure.Data;

#nullable disable

namespace TrackFlow.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250903010606_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrackFlow.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorMembershipId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetaJson")
                        .HasColumnType("text");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Verb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorMembershipId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.BoardColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int?>("WipLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardColumns");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Checklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.ChecklistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorMembershipId")
                        .HasColumnType("uuid");

                    b.Property<string>("BodyMd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorMembershipId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CustomFieldDefinitions");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldDefId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.ToTable("CustomFieldOptions");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldValue", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldDefId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("VBool")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("VNumber")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("VOptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("VText")
                        .HasColumnType("text");

                    b.HasKey("TicketId", "FieldDefId");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("OptionId");

                    b.ToTable("CustomFieldValues");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.EntityAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("NoteMd")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UploadedByMembershipId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FileId");

                    b.HasIndex("UploadedByMembershipId");

                    b.ToTable("EntityAttachments");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.FileObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ByteSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("integer");

                    b.Property<int?>("HeightPx")
                        .HasColumnType("integer");

                    b.Property<string>("Sha256Hex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StorageProvider")
                        .HasColumnType("integer");

                    b.Property<int?>("WidthPx")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FileObjects");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.FileVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ByteSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HeightPx")
                        .HasColumnType("integer");

                    b.Property<Guid>("OriginalFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WidthPx")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalFileId");

                    b.ToTable("FileVariants");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionMd")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.ProjectCounter", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("NextTicketNumber")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId");

                    b.ToTable("ProjectCounters");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Star", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssigneeMembershipId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardColumnId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionMd")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatePoints")
                        .HasColumnType("numeric");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentTicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReporterMembershipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeMembershipId");

                    b.HasIndex("BoardColumnId");

                    b.HasIndex("ParentTicketId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReporterMembershipId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.TicketEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorMembershipId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FromValue")
                        .HasColumnType("text");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorMembershipId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketEvents");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.TicketLabel", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.HasKey("TicketId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TicketLabels");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Activity", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Membership", "ActorMembership")
                        .WithMany()
                        .HasForeignKey("ActorMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActorMembership");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Board", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Project", "Project")
                        .WithMany("Boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.BoardColumn", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Checklist", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Checklists")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.ChecklistItem", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Checklist", "Checklist")
                        .WithMany("Items")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Comment", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Membership", "AuthorMembership")
                        .WithMany()
                        .HasForeignKey("AuthorMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorMembership");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldDefinition", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Project", "Project")
                        .WithMany("CustomFieldDefinitions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldOption", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.CustomFieldDefinition", "FieldDefinition")
                        .WithMany("Options")
                        .HasForeignKey("FieldDefinitionId");

                    b.Navigation("FieldDefinition");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldValue", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.CustomFieldDefinition", "FieldDefinition")
                        .WithMany("Values")
                        .HasForeignKey("FieldDefinitionId");

                    b.HasOne("TrackFlow.Domain.Entities.CustomFieldOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId");

                    b.HasOne("TrackFlow.Domain.Entities.Ticket", "Ticket")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldDefinition");

                    b.Navigation("Option");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.EntityAttachment", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.FileObject", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Membership", "UploadedByMembership")
                        .WithMany()
                        .HasForeignKey("UploadedByMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("File");

                    b.Navigation("UploadedByMembership");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.FileVariant", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.FileObject", "OriginalFile")
                        .WithMany("Variants")
                        .HasForeignKey("OriginalFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalFile");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Label", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Project", "Project")
                        .WithMany("Labels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Membership", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Company", "Company")
                        .WithMany("Memberships")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Project", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.ProjectCounter", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Project", "Project")
                        .WithOne("ProjectCounter")
                        .HasForeignKey("TrackFlow.Domain.Entities.ProjectCounter", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Star", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.User", "User")
                        .WithMany("Stars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Membership", "AssigneeMembership")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssigneeMembershipId");

                    b.HasOne("TrackFlow.Domain.Entities.BoardColumn", "BoardColumn")
                        .WithMany("Tickets")
                        .HasForeignKey("BoardColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Ticket", "ParentTicket")
                        .WithMany("SubTickets")
                        .HasForeignKey("ParentTicketId");

                    b.HasOne("TrackFlow.Domain.Entities.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Membership", "ReporterMembership")
                        .WithMany("ReportedTickets")
                        .HasForeignKey("ReporterMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssigneeMembership");

                    b.Navigation("BoardColumn");

                    b.Navigation("ParentTicket");

                    b.Navigation("Project");

                    b.Navigation("ReporterMembership");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.TicketEvent", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Membership", "ActorMembership")
                        .WithMany()
                        .HasForeignKey("ActorMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketEvents")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActorMembership");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.TicketLabel", b =>
                {
                    b.HasOne("TrackFlow.Domain.Entities.Label", "Label")
                        .WithMany("TicketLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackFlow.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketLabels")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Board", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.BoardColumn", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Checklist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Company", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.CustomFieldDefinition", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.FileObject", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Label", b =>
                {
                    b.Navigation("TicketLabels");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Membership", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("ReportedTickets");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Project", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("CustomFieldDefinitions");

                    b.Navigation("Labels");

                    b.Navigation("ProjectCounter");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Checklists");

                    b.Navigation("Comments");

                    b.Navigation("CustomFieldValues");

                    b.Navigation("SubTickets");

                    b.Navigation("TicketEvents");

                    b.Navigation("TicketLabels");
                });

            modelBuilder.Entity("TrackFlow.Domain.Entities.User", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Stars");
                });
#pragma warning restore 612, 618
        }
    }
}
